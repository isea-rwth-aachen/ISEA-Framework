#!/usr/bin/env python
# -*- coding: utf-8 -*-

import vtk
from vtk.numpy_interface import algorithms as algs
from vtk.numpy_interface import dataset_adapter as dsa
import numpy as np
import scipy.io as sio

folder = "C:/Users/l/Documents/Rest/Simulationsdaten/Beste Ergebnisse/Bodenkuhlung/SOC_95_Bodenkuhlung_15kW_Start30grad_mitGradient_GanzePlatte/"

def GetUpdateTimestep(algorithm):
#"""Returns the requested time value, or None if not present"""
      executive = algorithm.GetExecutive()
      outInfo = executive.GetOutputInformation(0)
      if not outInfo.Has(executive.UPDATE_TIME_STEP()):
          return None
      return outInfo.Get(executive.UPDATE_TIME_STEP())
  # This is the requested time-step. This may not be exactly equal to the
  # timesteps published in RequestInformation(). Your code must handle that
  # correctly
req_time = GetUpdateTimestep(self)

output = self.GetOutput()



def readFile(name, dtype = np.float64):
    returnValue = []
    with open(name, 'r') as f:
        for line in f:
            returnValue.append( np.fromstring(line, dtype=dtype, sep=','))
    return returnValue

def mkVtkIdList(it):
    vil = vtk.vtkIdList()
    for i in it:
        vil.InsertNextId(int(i) -1)
    return vil



areas = readFile(folder + 'Patch_Areas.csv', dtype=np.int64)
#try:
diga = sio.loadmat(folder + 'Patch_Temperatures_00.mat')
#print (diga["diga"]["daten"][0,0]["Temperature"])
Temperatures = diga["diga"]["daten"][0,0]["Temperature"][0,0]
Time = diga["diga"]["daten"][0,0]["Programmdauer"][0,0][0]
print (Time)
print (Temperatures, Temperatures.shape)
#except:
#    Temperatures = np.loadtxt( folder + 'Init/Patch_Temperatures.csv', delimiter=',', comments='#')

vertices = readFile(folder + 'Patch_Vertices.csv')

counter = 0
if (len(Temperatures.shape) ) ==1:
    Temperatures=np.resize(Temperatures, (Temperatures.shape[0]),1)


while req_time > Time[counter]:
    counter += 1

index = counter
points  = vtk.vtkPoints()
polys   = vtk.vtkCellArray()
scalars = vtk.vtkFloatArray()
scalars.SetName("Temperatur")

for i in range(len(vertices)):
    points.InsertPoint(i, vertices[i])
print(range(len(areas)))
for i in range(len(areas)):
   # print (i, Temperatures[i,index])
    polys.InsertNextCell( mkVtkIdList(areas[i]) )
    scalars.InsertTuple1(i, Temperatures[i,index] )



output.SetPoints(points)
output.SetPolys(polys)
output.GetCellData().SetScalars(scalars)


output.GetInformation().Set(output.DATA_TIME_STEP(), req_time)

